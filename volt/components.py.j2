{# Template file for Component generation #}# pyright: basic
"""
This file is automatically generated.
Do not edit this file directly.
"""
{% if not import_types %}from typing import Any
{% endif %}
from dataclasses import dataclass

from volt.components import Component
{% if components and import_types %}
from custom_types import ({% for component in components %}{% if component.fields %}
    {{ component.name }}Types,{% endif %}{% endfor %}
)
{% endif %}
{% for component in components %}
{% if component.parent_components|length == 0 %}class {{ component.name }}(Component):
{% elif component.parent_components|length == 1 %}class {{ component.name }}({{ component.parent_components[0] }}):
{% else %}class {{ component.name }}(
    {% for parent in component.parent_components %}{{ parent }},
    {% endfor %}
):{% endif %}
    template_name: str = "{{ component.template_name }}"
    block_name: str = "{{ component.block_name }}"

    {% if component.parent_components|length == 0 %}@dataclass
    class Context(Component.Context):{% elif component.parent_components|length == 1 %}@dataclass
    class Context({{ component.parent_components[0] }}.Context):{% else %}@dataclass
    class Context(
        {% for parent in component.parent_components %}{{ parent }}.Context,
        {% endfor %}
    ):{% endif %}
        {% for field in component.fields %}{{ field }}: {% if import_types %}{{ component.name }}Types.{{ field }}
        {% else %}Any{% endif %}{% else %}...
        {% endfor %}
    def __init__(self, context: Context) -> None:
        super().__init__(context)

{% endfor %}
